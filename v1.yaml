Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  InstanceAMI:
    Type: 'AWS::EC2::Image::Id'
    Description: EC2 instance AMI ID
    Default: ami-0c55b159cbfafe1f0
  EC2Tag:
    Type: String
    Default: ec2-instance-tag
    Description: Tag to apply to the EC2 instance
  DBName:
    Type: String
    Description: Name of the PostgreSQL database
  DBUsername:
    Type: String
    Description: Username for the PostgreSQL database
  DBPassword:
    Type: String
    Description: Password for the PostgreSQL database
    NoEcho: true
  DBInstanceClass:
    Type: String
    Description: Instance class for the PostgreSQL RDS instance
    Default: db.t2.micro
  DBAllocatedStorage:
    Type: Number
    Description: Amount of storage allocated for the PostgreSQL RDS instance (in GB)
    Default: 5
  DBMultiAZ:
    Type: String
    Description: Whether to enable Multi-AZ deployment for the PostgreSQL RDS instance
    AllowedValues:
      - true
      - false
    Default: false
  DBStorageType:
    Type: String
    Description: The storage type for the PostgreSQL RDS instance
    Default: gp2
    AllowedValues:
      - gp2
      - io1
      - st1
      - sc1
  GitHubRepo:
    Type: String
    Description: GitHub repository to use for the CodePipeline
  GitHubBranch:
    Type: String
    Description: GitHub branch to use for the CodePipeline
  GitHubToken:
    Type: String
    Description: GitHub access token to use for the CodePipeline
    NoEcho: true
Resources:
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: EC2SecurityGroup
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Ref EC2Tag
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref EC2Instance
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: DBSubnetGroup
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: RDSInstance
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      EngineVersion: '12.5'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: !Ref DBMultiAZ
      StorageType: !Ref DBStorageType
      VPCSecurityGroups:
        - !GetAtt 
          - DBSecurityGroup
          - GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
  DBSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      GroupDescription: RDS security group
      DBSecurityGroupIngress:
        - EC2SecurityGroupName: !Ref EC2SecurityGroup
          EC2SecurityGroupId: !GetAtt 
            - EC2SecurityGroup
            - GroupId
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'codecommit:*'
                  - 'codebuild:*'
                  - 'codedeploy:*'
                  - 'cloudformation:*'
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'ecs:*'
                  - 'iam:*'
                  - 'lambda:*'
                  - 'sns:*'
                  - 'sqs:*'
                Resource: '*'
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: CodePipeline
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubRepo
                Repo: !Sub '${GitHubRepo##*/}'
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 3
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: CodeBuildProject
      ServiceRole: !GetAtt 
        - CodeBuildServiceRole
        - Arn
      Artifacts:
        Location:
          S3Location:
            Bucket: !Ref CodeBuildBucket
            Path: build
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DB_NAME
            Type: PLAINTEXT
            Value: !Ref DBName
          - Name: DB_USERNAME
            Type: PLAINTEXT
            Value: !Ref DBUsername
          - Name: DB_PASSWORD
            Type: SECRET_MANAGER
            Value: !Ref DBPassword
      Source:
        Type: CODEPIPELINE
  CodeBuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-codebuild-bucket'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${CodeBuildBucket}'
  CodeDeployApplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: CodeDeployApplication
  CodeDeployDeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: CodeDeployDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      ServiceRoleArn: !GetAtt 
        - CodeDeployServiceRole
        - Arn
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                Resource: '*'
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      DesiredCapacity: !Ref ASGDesiredCapacity
      TargetGroupARNs:
        - !Ref TargetGroup
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref EC
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash

          echo "export DB_NAME=${DBName}" >> /etc/profile.d/environment.sh

          echo "export DB_USERNAME=${DBUsername}" >>
          /etc/profile.d/environment.sh

          echo "export DB_PASSWORD=${DBPassword}" >>
          /etc/profile.d/environment.sh

          yum update -y

          yum install -y python3-pip

          pip3 install django

          echo "from django.contrib.auth.models import User;
          User.objects.create_superuser('admin', 'admin@example.com',
          'password')" | python3 manage.py shell
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp2
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Ref TargetGroupName
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: !Ref RDSAllocatedStorage
      DBInstanceClass: !Ref RDSInstanceClass
      Engine: postgres
      EngineVersion: '13'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      MultiAZ: !Ref MultiAZ
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
    
  RDSSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Enable database access
      DBSecurityGroupIngress:
        - EC2SecurityGroupName: !Ref EC

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Ref DBSubnetGroupName
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
